| CS 521|
| PROJECT 2: USER PROGRAMS|
| DESIGN DOCUMENT|
+--------------------------+

---- GROUP ----

Vishwak Nunna vishwakn@buffalo.edu
Nehal Praveen Karumoju nehalpra@buffalo.edu
Imran Abdul Azeez aabdul@buffalo.edu



---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

Vishwak Nunna : 33.33%
Nehal Praveen Karumoju : 33.33%
Imran Abdul Azeez : 33.33%


			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1.	struct_arguements
This structure is used to make passing arguments between functions easier and more organized.
2.	struct ChildStatus
This structure tracks the status of a child thread. It helps the process_wait function know if the child thread needs to be killed or has already finished.
3.	struct thread *parent
A pointer in the thread structure that marks a thread as a parent. This helps keep track of parent-child relationships between threads.
4.	struct thread *child
A pointer in the thread structure that marks a thread as a child. This helps manage the child thread created by the parent.
5.	struct thread *cur
A pointer to the currently running thread. This is used to quickly access the thread that is actively executing on the CPU.









---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

•	First, we go through the input to count how many arguments there are. This way, we only push exactly that many arguments onto the stack.
•	When we push the arguments onto the stack, we do it in reverse order.This is because the stack grows downward in memory. Reversing the order makes sure the arguments end up in the correct order in argv[] when the program starts running.
•	Before we put anything on the stack, we calculate how much space the arguments will take, including some extra for safety.
•	To make sure there’s enough room, we use a function called palloc to grab the memory we need. This ensures we never run out of stack space.
•	By doing this, we make sure we’re not cramming too much onto the stack, so there’s no risk of overflow, even if there are a lot of arguments.
•	
---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
Pintos uses strtok_r() because it is safer for multitasking. strtok() uses static variables internally, so if two processes or threads use it at the same time, their data could get mixed up. strtok_r() avoids this because it doesn’t rely on shared variables. It works well in an environment like Pintos, where multiple threads might parse strings at the same time.




>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1.	Separating argument parsing into the shell simplifies kernel design since the kernel is focused on process creation and execution.

2.	The shell can interpret and preprocess commands (such as pipes, redirects, and wildcards) before passing them to the kernel, allowing for more complicated command-line operations.
3.	It shortens the time a user is inside a kernel.

SYSTEM CALLS
============

---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
1.	struct open_file
Represents an open file with a file descriptor, the file pointer, and a list element for managing multiple open files.
2.	static struct list ready_list
A global list holding threads that are ready to run but not currently running.
3.	static struct list all_list
A global list containing all threads in the system for management and debugging.
4.	struct semaphore filesys_sema
A semaphore used to ensure safe access to the file system when multiple threads interact with it.
5.	struct thread *parent
Tracks the parent thread of a given thread, supporting parent-child relationships for process management.
6.	struct list files
A list in each thread to manage its open file descriptors.
7.	int cur_fd
Tracks the next available file descriptor for a thread, starting at 2 (reserved for STDIN and STDOUT).
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
File descriptors are unique within a single process, not the entire OS. Each process tracks its own list of file descriptors using the files list stored in the struct thread.This list contains entries of type struct open_file, which associates file descriptor numbers with their corresponding file pointers. Each thread also maintains its next available file descriptor number , starting at 2 (since 0 and 1 are reserved for standard input and output).

This design allows each process to manage its own file descriptors independently, ensuring no conflicts between processes while maintaining efficient access to files.







---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
For reading, the code first checks if the buffer is valid and within bounds. If the buffer is valid, the thread locks the file system to ensure that only one thread can read from it at a time. Once the thread holds lock, it checks if the file descriptor corresponds to any special cases, such as STDIN. If no special cases, then  the data is read from the file, the lock is released, and the result is returned. Similarly, for writing, the code first verifies that the buffer is valid. If valid, it locks the file system to prevent concurrent access, writes the data to the file using file_write, and then releases the lock to allow other threads to proceed.
>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
For full page (4,096 bytes) of data:
Least possible inspections will be 1, this happens when entire page is validated as a block.
Greatest possible inspections will be 4096, this happens when it is validated byte-by-byte.

For 2 bytes of data:
Least possible inspections will be 1, this happens when both bytes are on the same page.
Greatest possible inspections will be 2, this happens when bytes span across two pages.

The system works in linear time (n), so while it’s not the most efficient, there’s no pressing need for improvement unless performance becomes an issue.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
Implementation of wait:
static int sys_wait (int arg0, int arg1 UNUSED, int arg2 UNUSED)
{ 
  pid_t pid = arg0;
  return process_wait(pid); 
}

The wait system call is used by a parent process to wait for its child process to finish. When the parent calls wait, it passes the child’s pid as an argument. The function sys_wait handles this by calling process_wait. Inside process_wait, the parent checks its list of child processes to find the child with the matching pid. If the child is found, the parent waits by blocking on a semaphore (semaExit) until the child finishes. When the child exits, it updates its exit status and signals the semaphore to wake up the parent. The parent then retrieves the child’s exit status, removes the child from its list, and cleans up the child’s resources. If the child doesn’t exist or has already been waited on, the function returns -1. This ensures the parent and child stay synchronized and that no resources are left behind after the child exits.










>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
Handling Errors:
1.	If the address is valid, the operation is carried out, and the memory is released after use.
2.	Use try-finally to release resources.
3.	Before doing anything, the code checks if the user-provided memory address is valid. If it’s not, the process is terminated immediately.

Example:
In the sys_write system call, the buffer is checked first. If it’s invalid, the process exits. If valid, the data is written, and the memory is released afterward.





---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
The `exec` system call makes the parent thread wait until the child process finishes loading. The child thread updates the parent about its progress. If the child fails to load properly, the parent stops assigning it tasks. This way, the parent immediately knows if something goes wrong and avoids depending on the failed child.
>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits ?  After C exits?  Are
>> there any special cases?
1.	When the parent calls wait(C), it locks the child thread to ensure no other thread can interfere.
2.	If the parent exits first, the child thread runs to completion and releases its resources.
3.	When a thread finishes, all its resources (like file descriptors and memory) are cleaned up. This happens whether the parent waits for the child or not.
4.	If the parent dies before the child, the child keeps running and cleans itself up when it’s done.




---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
Using `palloc` and `malloc` helps manage memory effectively between the user stack and the kernel stack. It makes communication between the user and the kernel simple and dependable.
>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantages:
•	Simple, process-local descriptors simplify management while avoiding global conflict.
•	Allows for flexible management of multiple files per process.
Disadvantages:
•	This may take slightly more time compared to optimized approach.
>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
1.	We’d have to update how parent and child threads interact since they rely on tid_t for tracking processes.
2.	The advantage of changing it would be better tracking of child threads and memory pages, which could improve debugging and resource management.
			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

